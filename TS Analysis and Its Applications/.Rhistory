x <- c(1,2,3,4,5)
y <- rnorm(5,1)
plot(x,y)
y <- rnorm(100,1)
plot(y)
utils
demo()
getwd()
x <- 2
x
Sys.sleep(10000000)
Sys.sleep(1000000)
source('F:/Coursera/R Programming/Course Codes/mycode.R')
myfunction
myfunction()
second()
second(10)
pwd
ls()
pwd
getwd()
help getwd
help(getwd)
stat_contour
help(stat_contour)
help(ggplot2)
??ggplot2
install.packages("ggplot2")
library(reshape2) # for melt
install.packages(c("boot", "class", "cluster", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
volcano3d <- melt(volcano)
names(volcano3d) <- c("x", "y", "z")
View(volcano3d)
v <- ggplot(volcano3d, aes(x, y, z = z))
library("ggplot2", lib.loc="E:/Program Files/R/R-3.0.2/library")
Version()
R.Version()
install.packages("ggplot2")
install.packages("MASS")
library("ggplot2", lib.loc="E:/Program Files/R/R-3.1.0/library")
library(reshape2) # for melt
volcano3d <- melt(volcano)
names(volcano3d) <- c("x", "y", "z")
v <- ggplot(volcano3d, aes(x, y, z = z))
v + stat_contour()
?mean
??mean
v + stat_contour()
locator()
ls()
x
?locator
locator(n=1)
x <- nrand(10)
x <- rnorm(10)
y <- rnorm(10)
plot(x,y,'o')
locator()
identify()
addPoints = checkbox(TRUE, "Add points")
source('F:/GitHub/GettingStartedWithRStudio/Chpt03/tkdensity-in-manipulate.R')
)
source('F:/GitHub/GettingStartedWithRStudio/Chpt03/tkdensity-in-manipulate.R')
require(manipulate)
dens <- list("Normal"=rnorm, "Exponential"=rexp)
manipulate(## The plot expression
{
y <- dens[[distribution]](n)
plot(density(y, bw=bw, kernel=kernel))
if(addPoints)
points(y,rep(0,length(y)))
},
## define controls
n = slider(5, 100, initial=10),
distribution=picker("Normal","Exponential"),
kernel = picker("gaussian", "epanechikov", "rectangular",
"triangular", "cosine"),
bw = slider(.05,2, initial=1),
addPoints = checkbox(TRUE, "Add points")
)
x <- norm(10)
x <- norm(c(10,2))
x <- norm(10,2)
x <- norm(0,1)
x <- rnorm(10)
y <- rnorm(10)
plot(x,y)
x <- rnorm(100,2)
x.head()
head(x)
plot(x)
size(x)
dim(x)
getwd()
pwd()
pwd
setwd("F:\GitHub\RStudy\TS Analysis and Its Applications")
setwd('F:\GitHub\RStudy\TS Analysis and Its Applications')
setwd('F:\\GitHub\\RStudy\\TS Analysis and Its Applications')
getwd()
load("tsa3.rda")
ls()
tsa3.version
jj
EQ.head()
head(EQ)
EQ.top()
print(EQ)
EQ
EQ5.head()
EQ5.top()
top(EQ5)
EQ5
EQ[0]
EQ5[0]
EQ5[1]
plot(EQ5)
hep lag.plot2
help lag.plot2()
help lag.plot2
help(lag.plot2)
??lag.plot2
lag.plot2?
?
;
2+2
5*5 + 2 # multiplication and addition
5/5 - 3 # division and subtraction
log(exp(pi)) # log, exponential, pi
sin(pi/2) # sinusoids
exp(1)^(-2) # power
sqrt(8) # square root
1:5 # sequences
seq(1, 10 by=2) # sequences
seq(1, 10, by=2) # sequences
rep(2, 3) # repeat 2 three times
x <- 1 + 2 # put 1 + 2 in object x
x
x = 1 + 2 # same as above with fewer keystrokes
(y = 9*3) # put 9 times 3 in y and view the result
y
(z = rnorm(5,0,1)) # put 5 standard normals into z and print z
ls()
ls(pattern = "my")  # list every object that contains "my"
rm(dummy) # remove object "dummy"
help.start() # html help and documentation (use it)
help(exp) # specific help (?exp is the same)
setwd("/TimeSeries/") # change working directory to TimeSeries
getwd() # get working directory
q() # end the session (keep reading)
mydata = c(1,2,3,2,1)
mydata
mydata[3] # the third element
mydata[3:5] # elements three through five
